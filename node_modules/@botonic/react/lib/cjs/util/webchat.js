"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServerErrorMessage = exports.shouldKeepSessionOnReload = exports.initSession = exports.createUser = exports._getThemeProperty = void 0;
const tslib_1 = require("tslib");
const lodash_merge_1 = tslib_1.__importDefault(require("lodash.merge"));
const ua_parser_js_1 = tslib_1.__importDefault(require("ua-parser-js"));
const uuid_1 = require("uuid");
const constants_1 = require("../constants");
const objects_1 = require("./objects");
/**
 * Returns the value of a property defined in bot's theme based on WEBCHAT.CUSTOM_PROPERTIES dictionary.
 * It gives preference to nested defined properties (e.g.: header.style) over plain properties (e.g.: headerStyle).
 * If property doesn't exist, returns the defaultValue.
 */
const _getThemeProperty = theme => (property, defaultValue = undefined) => {
    for (const [k, v] of Object.entries(constants_1.WEBCHAT.CUSTOM_PROPERTIES)) {
        if (v == property) {
            const nestedProperty = (0, objects_1.getProperty)(theme, v);
            if (nestedProperty !== undefined)
                return nestedProperty;
            const plainProperty = (0, objects_1.getProperty)(theme, k);
            if (plainProperty !== undefined)
                return plainProperty;
            return defaultValue;
        }
    }
    return undefined;
};
exports._getThemeProperty = _getThemeProperty;
const createUser = () => {
    const parser = new ua_parser_js_1.default();
    const ua = parser.getResult();
    let name = `${ua.os.name} ${ua.browser.name}`;
    if (ua.device && ua.device.type)
        name = `${ua.device.type} ${name}`;
    return {
        id: (0, uuid_1.v4)(),
        name,
    };
};
exports.createUser = createUser;
const initSession = session => {
    if (!session)
        session = {};
    const hasUserId = session.user && session.user.id !== undefined;
    if (!session.user || Object.keys(session.user).length === 0 || !hasUserId)
        session.user = !hasUserId ? (0, lodash_merge_1.default)(session.user, (0, exports.createUser)()) : (0, exports.createUser)();
    return session;
};
exports.initSession = initSession;
const shouldKeepSessionOnReload = ({ initialDevSettings, devSettings, }) => !initialDevSettings || (devSettings && devSettings.keepSessionOnReload);
exports.shouldKeepSessionOnReload = shouldKeepSessionOnReload;
const getServerErrorMessage = serverConfig => {
    if (!serverConfig || !serverConfig.errorMessage)
        return 'Connection issues';
    if (typeof serverConfig.errorMessage === 'function') {
        return serverConfig.errorMessage();
    }
    return serverConfig.errorMessage;
};
exports.getServerErrorMessage = getServerErrorMessage;
//# sourceMappingURL=webchat.js.map