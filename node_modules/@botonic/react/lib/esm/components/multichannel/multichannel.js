import { jsx as _jsx } from "react/jsx-runtime";
import { createElement as _createElement } from "react";
import React, { useContext } from 'react';
import { COMPONENT_TYPE } from '../../constants';
import { RequestContext } from '../../contexts';
import { deepMapWithIndex } from '../../util/react';
import { Text } from '../text';
import { MultichannelButton } from './multichannel-button';
import { MultichannelCarousel } from './multichannel-carousel';
import { MultichannelContext } from './multichannel-context';
import { MultichannelReply } from './multichannel-reply';
import { MultichannelText } from './multichannel-text';
import { isFacebook, isWhatsapp, MULTICHANNEL_WHATSAPP_PROPS, } from './multichannel-utils';
export const Multichannel = props => {
    const requestContext = useContext(RequestContext);
    if (!isWhatsapp(requestContext) && !isFacebook(requestContext)) {
        return props.children;
    }
    if (isFacebook(requestContext)) {
        const newChildren = deepMapWithIndex(props.children, child => {
            if (child && child.type && child.type.name === COMPONENT_TYPE.TEXT) {
                return (_createElement(MultichannelText, Object.assign({}, child.props, { key: child.key }), child.props.children));
            }
            return child;
        });
        return newChildren;
    }
    let newChildren = deepMapWithIndex(props.children, (child, index) => {
        if (child && child.type && child.type.name === COMPONENT_TYPE.BUTTON) {
            return (_createElement(MultichannelButton, Object.assign({}, child.props, { key: child.key }), child.props.children));
        }
        if (child && child.type && child.type.name === COMPONENT_TYPE.REPLY) {
            return (_createElement(MultichannelReply, Object.assign({}, child.props, { key: child.key }), child.props.children));
        }
        if (child && child.type && child.type.name === COMPONENT_TYPE.TEXT) {
            return (_createElement(MultichannelText, Object.assign({}, child.props, props.text, { key: child.key }, (props.messageSeparator &&
                index > 0 && { newline: props.messageSeparator })), child.props.children));
        }
        if (child && child.type && child.type.name === COMPONENT_TYPE.CAROUSEL) {
            return (_createElement(MultichannelCarousel, Object.assign({}, child.props, props.carousel, { key: child.key }), child.props.children));
        }
        return child;
    });
    if (props.messageSeparator != null) {
        newChildren = newChildren.map((c, index) => index > 0 && typeof c === 'string' ? props.messageSeparator + c : c);
        newChildren = (_jsx(Text, Object.assign({}, MULTICHANNEL_WHATSAPP_PROPS, { children: newChildren }), props.key));
    }
    return (_jsx(MultichannelContext.Provider, Object.assign({ value: {
            currentIndex: props.firstIndex,
            boldIndex: props.boldIndex,
            indexSeparator: props.indexSeparator,
            messageSeparator: props.messageSeparator,
        } }, { children: newChildren })));
};
//# sourceMappingURL=multichannel.js.map