import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useContext } from 'react';
import { ROLES, WEBCHAT } from '../../constants';
import { WebchatContext } from '../../contexts';
import { resolveImage } from '../../util/environment';
import { StyledTriggerButton, TriggerImage, UnreadMessagesCounter, } from './styles';
export const TriggerButton = () => {
    const { webchatState, getThemeProperty, toggleWebchat } = useContext(WebchatContext);
    const getTriggerImage = () => {
        const image = getThemeProperty(WEBCHAT.CUSTOM_PROPERTIES.triggerButtonImage, undefined);
        if (!image) {
            webchatState.theme.triggerButtonImage = WEBCHAT.DEFAULTS.LOGO;
            return null;
        }
        return image;
    };
    const triggerButtonImage = getTriggerImage();
    const triggerButtonStyle = getThemeProperty(WEBCHAT.CUSTOM_PROPERTIES.triggerButtonStyle);
    const notificationsTriggerButtonEnabled = getThemeProperty(WEBCHAT.CUSTOM_PROPERTIES.notificationsTriggerButtonEnabled, false);
    const notificationsEnabled = getThemeProperty(WEBCHAT.CUSTOM_PROPERTIES.notificationsEnabled, notificationsTriggerButtonEnabled);
    const CustomTriggerButton = getThemeProperty(WEBCHAT.CUSTOM_PROPERTIES.customTrigger, undefined);
    const handleClick = (event) => {
        toggleWebchat(true);
        event.preventDefault();
    };
    return (_jsxs("div", Object.assign({ onClick: handleClick }, { children: [webchatState.numUnreadMessages !== 0 && notificationsEnabled && (_jsx(UnreadMessagesCounter, Object.assign({ className: 'trigger-notifications' }, { children: webchatState.numUnreadMessages }))), CustomTriggerButton ? (_jsx(CustomTriggerButton, {})) : (_jsx(StyledTriggerButton, Object.assign({ role: ROLES.TRIGGER_BUTTON, style: triggerButtonStyle }, { children: triggerButtonImage && (_jsx(TriggerImage, { src: resolveImage(triggerButtonImage) })) })))] })));
};
//# sourceMappingURL=index.js.map