import { __awaiter } from "tslib";
import { EventTypes } from '../models';
import { getConnectionEventEntity, getMessageEventEntities, getUserEntity, getUserEventsTable, GLOBAL_SECONDARY_INDEX_NAME, SORT_KEY_NAME, USER_PREFIX, } from './dynamodb-utils';
export class DynamoDBDataProvider {
    constructor(url) {
        try {
            const urlParts = url.split('://')[1].split('.');
            this.tableName = urlParts[0];
            this.region = urlParts[1];
            this.userEventsTable = getUserEventsTable(this.tableName, this.region);
            this.userEntity = getUserEntity(this.userEventsTable);
            this.connectionEventEntity = getConnectionEventEntity(this.userEventsTable);
            this.messageEventEntities = getMessageEventEntities(this.userEventsTable);
        }
        catch (e) {
            console.log({ e });
        }
    }
    // @ts-ignore
    getUsers(limit = 10, offset = 0) {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: finish to implement with offset
            const result = yield this.userEventsTable.scan({
                filters: { attr: SORT_KEY_NAME, beginsWith: USER_PREFIX },
                limit,
            });
            return result.Items;
        });
    }
    getUser(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const userById = {
                id: id,
                SK: id,
            };
            const result = yield this.userEntity.get(userById);
            if (Object.keys(result).length === 0)
                return undefined;
            return result.Item;
        });
    }
    getUserByWebsocketId(websocketId) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.userEventsTable.query(websocketId, {
                index: GLOBAL_SECONDARY_INDEX_NAME,
            });
            if (result.Count === 0)
                return undefined;
            return result.Items[0];
        });
    }
    // @ts-ignore
    getUserByField(field, value) {
        return __awaiter(this, void 0, void 0, function* () { });
    } //TODO: Implement
    saveUser(user) {
        return __awaiter(this, void 0, void 0, function* () {
            const putUser = Object.assign(Object.assign({}, user), { id: user.id, userId: user.id });
            yield this.userEntity.put(putUser);
            return user;
        });
    }
    updateUser(user) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateUser = Object.assign(Object.assign({}, user), { id: user.id, userId: user.id });
            const res = yield this.userEntity.update(updateUser);
            return user;
        });
    }
    // @ts-ignore
    deleteUser(id) {
        return __awaiter(this, void 0, void 0, function* () { });
    } // TODO: Implement
    // @ts-ignore
    getEvents(limit = 10, offset = 0) {
        return __awaiter(this, void 0, void 0, function* () { });
    } // TODO: Implement
    // @ts-ignore
    getEvent(id) {
        return __awaiter(this, void 0, void 0, function* () { });
    } // TODO: Implement
    saveEvent(event) {
        return __awaiter(this, void 0, void 0, function* () {
            if (event.eventType === EventTypes.CONNECTION) {
                yield this.connectionEventEntity.put(event);
            }
            if (event.eventType === EventTypes.MESSAGE) {
                yield this.messageEventEntities[event.type].put(event);
            }
            // TODO: Implementation of other event types
            return event;
        });
    }
    // @ts-ignore
    updateEvent(event) {
        return __awaiter(this, void 0, void 0, function* () { });
    } // TODO: Implement
    // @ts-ignore
    deleteEvent(id) {
        return __awaiter(this, void 0, void 0, function* () { });
    } // TODO: Implement
}
//# sourceMappingURL=dynamodb-data-provider.js.map